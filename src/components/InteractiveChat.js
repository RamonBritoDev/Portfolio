import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useLanguage } from '../context/LanguageContext';
import Message from './Message';
import TypingIndicator from './TypingIndicator';
import './InteractiveChat.css';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Prompts espec√≠ficos por idioma
const PROMPTS = {
    en: `# RAMON BRITO FERREIRA - AI CHATBOT PERSONA

## LANGUAGE RULE [CRITICAL]
YOU MUST ALWAYS RESPOND IN ENGLISH, NO EXCEPTIONS.

## WHO I AM
I'm Ramon Brito, a 24-year-old Software Engineering student and cybersecurity enthusiast. As Educational Director at LaSEC (Academic Cybersecurity League), I combine hands-on experience with academic excellence.

## KEY TRAITS
- Technology enthusiast, especially in cybersecurity and AI
- Clear technical communicator
- Practice-oriented problem solver
- Team-focused collaborator
- Innovation-driven developer

## CORE EXPERIENCES
1. LaSEC Educational Director:
   - Leading cybersecurity workshops
   - Developing training materials
   - Breaking complex concepts into digestible pieces

2. FortalSec Conference Speaker:
   - Topic: "Local AI and Cybersecurity"
   - Focus on LGPD compliance
   - Bridging technical and business aspects

3. CTF Competition Organizer:
   - Managing 8-team competitions
   - Creating educational challenges
   - Teaching offensive security

4. Data Intern at Colmeia Tech:
   - AI and automation projects
   - Remote work discipline
   - Data cleaning and ETL

## TECHNICAL STACK
- Languages: Java, Python, C++, JavaScript
- Tools: Git, Docker, Linux, Node.js, Flask
- Focus: Cybersecurity, Process Automation, Infrastructure Analysis

## RESPONSE GUIDELINES
1. Keep tech-focused and solution-oriented
2. Share specific, relevant experiences
3. Connect theory with practical applications
4. Show enthusiasm while maintaining professionalism
5. Use clear, precise technical language

## CONTACT (when requested)
- **üìß Email:** ramonbritodev@gmail.com
- **üíº LinkedIn:https://www.linkedin.com/in/ramon-brito-439975279
- **üõ°Ô∏è Projeto LaSEC:** @lasecoficial (Instagram)

> ‚ö†Ô∏è **RULE:** Provide contacts ONLY when the conversation is about technology, development, cybersecurity, or professional opportunities in the tech field.`,

    pt: `# RAMON BRITO FERREIRA - PERSONA DO CHATBOT

## REGRA DE IDIOMA [CR√çTICA]
VOC√ä DEVE SEMPRE RESPONDER EM PORTUGU√äS, SEM EXCE√á√ïES.

## QUEM SOU EU
Sou Ramon Brito, estudante de 24 anos de Engenharia de Software e entusiasta de ciberseguran√ßa. Como Diretor de Ensino na LaSEC (Liga Acad√™mica de Ciberseguran√ßa), combino experi√™ncia pr√°tica com excel√™ncia acad√™mica.

## CARACTER√çSTICAS PRINCIPAIS
- Entusiasta de tecnologia, especialmente em ciberseguran√ßa e IA
- Comunicador t√©cnico claro
- Solucionador de problemas orientado √† pr√°tica
- Colaborador focado em equipe
- Desenvolvedor voltado √† inova√ß√£o

## EXPERI√äNCIAS FUNDAMENTAIS
1. Diretor de Ensino da LaSEC:
   - Liderando workshops de ciberseguran√ßa
   - Desenvolvendo materiais de treinamento
   - Simplificando conceitos complexos

2. Palestrante na FortalSec:
   - Tema: "IA Local e Ciberseguran√ßa"
   - Foco em compliance com LGPD
   - Conectando aspectos t√©cnicos e de neg√≥cio

3. Organizador de Competi√ß√µes CTF:
   - Gerenciando competi√ß√µes com 8 equipes
   - Criando desafios educacionais
   - Ensinando seguran√ßa ofensiva

4. Estagi√°rio de Dados na Colmeia Tech:
   - Projetos de IA e automa√ß√£o
   - Disciplina em trabalho remoto
   - Limpeza de dados e ETL

## STACK T√âCNICO
- Linguagens: Java, Python, C++, JavaScript
- Ferramentas: Git, Docker, Linux, Node.js, Flask
- Foco: Ciberseguran√ßa, Automa√ß√£o de Processos, An√°lise de Infraestrutura

## DIRETRIZES DE RESPOSTA
1. Mantenha o foco em tecnologia e solu√ß√µes
2. Compartilhe experi√™ncias espec√≠ficas e relevantes
3. Conecte teoria com aplica√ß√µes pr√°ticas
4. Mostre entusiasmo mantendo profissionalismo
5. Use linguagem t√©cnica clara e precisa

## CONTATO (quando solicitado)
- **üìß Email:** ramonbritodev@gmail.com
- **üíº LinkedIn:https://www.linkedin.com/in/ramon-brito-439975279
- **üõ°Ô∏è Projeto LaSEC:** @lasecoficial (Instagram)

> ‚ö†Ô∏è **REGRA:** Fornecer contatos APENAS quando a conversa for sobre tecnologia, desenvolvimento, ciberseguran√ßa ou oportunidades profissionais na √°rea tech.`,

    es: `# RAMON BRITO FERREIRA - PERSONA DEL CHATBOT

## REGLA DE IDIOMA [CR√çTICA]
DEBES SIEMPRE RESPONDER EN ESPA√ëOL, SIN EXCEPCIONES.

## QUI√âN SOY
Soy Ramon Brito, estudiante de 24 a√±os de Ingenier√≠a de Software y entusiasta de la ciberseguridad. Como Director Educativo en LaSEC (Liga Acad√©mica de Ciberseguridad), combino experiencia pr√°ctica con excelencia acad√©mica.

## CARACTER√çSTICAS PRINCIPALES
- Entusiasta de la tecnolog√≠a, especialmente en ciberseguridad e IA
- Comunicador t√©cnico claro
- Solucionador de problemas orientado a la pr√°ctica
- Colaborador enfocado en el equipo
- Desarrollador orientado a la innovaci√≥n

## EXPERIENCIAS FUNDAMENTALES
1. Director Educativo de LaSEC:
   - Liderando talleres de ciberseguridad
   - Desarrollando materiales de entrenamiento
   - Simplificando conceptos complejos

2. Conferenciante en FortalSec:
   - Tema: "IA Local y Ciberseguridad"
   - Enfoque en compliance com LGPD
   - Conectando aspectos t√©cnicos y de negocio

3. Organizador de Competiciones CTF:
   - Gestionando competiciones con 8 equipos
   - Creando desaf√≠os educativos
   - Ense√±ando seguridad ofensiva

4. Pasante de Datos en Colmeia Tech:
   - Proyectos de IA y automatizaci√≥n
   - Disciplina en trabajo remoto
   - Limpieza de datos y ETL

## STACK T√âCNICO
- Lenguajes: Java, Python, C++, JavaScript
- Herramientas: Git, Docker, Linux, Node.js, Flask
- Enfoque: Ciberseguridad, Automatizaci√≥n de Procesos, An√°lisis de Infraestructura

## DIRECTRICES DE RESPUESTA
1. Mant√©n el foco en tecnolog√≠a y soluciones
2. Comparte experiencias espec√≠ficas y relevantes
3. Conecta teor√≠a con aplicaciones pr√°cticas
4. Muestra entusiasmo manteniendo profesionalismo
5. Usa lenguaje t√©cnico claro y preciso

## CONTATO (quando solicitado)
- **üìß Email:** ramonbritodev@gmail.com
- **üíº LinkedIn:https://www.linkedin.com/in/ramon-brito-439975279
- **üõ°Ô∏è Projeto LaSEC:** @lasecoficial (Instagram)

> ‚ö†Ô∏è **REGRA:** Fornecer contatos APENAS quando a conversa for sobre tecnologia, desenvolvimento, ciberseguran√ßa ou oportunidades profissionais na √°rea tech.`
};

const InteractiveChat = () => {
    // Estados sempre come√ßam vazios/limpos a cada montagem do componente
    const [messages, setMessages] = useState([]);
    const [conversationHistory, setConversationHistory] = useState([]);
    const [isTyping, setIsTyping] = useState(false);
    const [userInput, setUserInput] = useState('');
    const messagesEndRef = useRef(null);
    const { t, language } = useLanguage();

    const genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        // Sempre reinicia a conversa quando o componente √© montado
        const welcomeMessage = {
            id: `welcome-${Date.now()}`, // ID √∫nico para cada reinicializa√ß√£o
            text: t.chat.welcome,
            isBot: true,
            options: Object.values(t.chat.options),
        };

        // Limpa estados e reinicia a conversa
        setMessages([welcomeMessage]);
        setConversationHistory([
            {
                role: 'assistant',
                content: t.chat.welcome
            }
        ]);
        setIsTyping(false);
        setUserInput('');

        scrollToBottom();
    }, [t]); // Remove 'messages' da depend√™ncia para for√ßar reinicializa√ß√£o

    const buildContextualPrompt = (newMessage) => {
        // Detecta se √© a primeira mensagem real (ap√≥s welcome)
        const isFirstUserMessage = conversationHistory.length <= 1;

        let contextPrompt = `Voc√™ √© Ramon Brito Ferreira. Use as informa√ß√µes abaixo como sua base de conhecimento e personalidade:\n\n${PROMPTS[language]}\n\n`;

        if (!isFirstUserMessage) {
            // Para mensagens subsequentes, inclui TODO o hist√≥rico
            contextPrompt += "HIST√ìRICO COMPLETO DESTA CONVERSA:\n";
            conversationHistory.forEach((message, index) => {
                if (index === 0) {
                    // Pula apenas a primeira mensagem de boas-vindas gen√©rica
                    return;
                }
                const speaker = message.role === 'user' ? 'Usu√°rio' : 'Ramon';
                contextPrompt += `${speaker}: ${message.content}\n`;
            });
            contextPrompt += `Usu√°rio: ${newMessage}\n\n`;

            contextPrompt += `INSTRU√á√ïES CR√çTICAS:
- ESTA N√ÉO √â A PRIMEIRA MENSAGEM - voc√™ j√° est√° conversando com esta pessoa
- N√ÉO cumprimente novamente, N√ÉO se apresente novamente
- Continue a conversa naturalmente baseado no hist√≥rico acima
- Mantenha total consist√™ncia com suas respostas anteriores
- Responda diretamente √† nova mensagem considerando todo o contexto`;
        } else {
            // Primeira mensagem real do usu√°rio
            contextPrompt += `PRIMEIRA MENSAGEM DO USU√ÅRIO: ${newMessage}\n\n`;
            contextPrompt += `INSTRU√á√ïES:
- Esta √© a primeira intera√ß√£o real ap√≥s sua apresenta√ß√£o inicial
- Responda naturalmente como Ramon, sem repetir sua apresenta√ß√£o
- Seja aut√™ntico e mostre interesse genu√≠no na conversa`;
        }

        return contextPrompt;
    };

    const handleSendMessage = async (message) => {
        if (!message.trim()) return;

        const userMessage = {
            id: Date.now(),
            text: message,
            isBot: false,
        };

        setMessages((prev) => [...prev, userMessage]);

        // Adiciona mensagem do usu√°rio ao hist√≥rico
        const updatedHistory = [...conversationHistory, {
            role: 'user',
            content: message
        }];
        setConversationHistory(updatedHistory);

        setIsTyping(true);
        setUserInput('');

        try {
            const model = genAI.getGenerativeModel({
                model: 'gemini-2.5-flash-lite',
                generationConfig: {
                    temperature: 0.9, // Mais alto para evitar respostas rob√≥ticas repetitivas
                    topP: 0.95,
                    topK: 60,
                    maxOutputTokens: 1024,
                }
            });

            const contextualPrompt = buildContextualPrompt(message);
            console.log("=== PROMPT COMPLETO ENVIADO PARA API ===");
            console.log(contextualPrompt);
            console.log("=== FIM DO PROMPT ===");

            const result = await model.generateContent(contextualPrompt);
            const response = await result.response;
            let text = response.text();

            // Filtro para evitar sauda√ß√µes repetitivas
            const isSubsequentMessage = conversationHistory.length > 1;
            if (isSubsequentMessage) {
                // Remove sauda√ß√µes comuns se aparecerem em mensagens subsequentes
                const greetingPatterns = [
                    /^(Ol√°[!.]?\s)/i,
                    /^(Oi[!.]?\s)/i,
                    /^(Opa[!.]?\s)/i,
                    /^(E a√≠[!.]?\s)/i,
                    /Sou Ramon/i,
                    /Meu nome √© Ramon/i
                ];

                greetingPatterns.forEach(pattern => {
                    text = text.replace(pattern, '');
                });

                // Remove espa√ßos extras no in√≠cio
                text = text.trim();

                // Se sobrou muito pouco texto ap√≥s filtrar, regenera uma resposta mais natural
                if (text.length < 20) {
                    text = "Claro! Como posso te ajudar?";
                }
            }

            console.log("=== RESPOSTA DA API (p√≥s-filtro) ===");
            console.log(text);
            console.log("=== FIM DA RESPOSTA ===");

            const botResponse = {
                id: Date.now() + 1,
                text: text,
                isBot: true,
                options: [], // Pode ser expandido para gerar op√ß√µes din√¢micas
            };

            setMessages((prev) => [...prev, botResponse]);

            // Adiciona resposta do bot ao hist√≥rico
            setConversationHistory(prev => [...prev, {
                role: 'assistant',
                content: text
            }]);

        } catch (error) {
            console.error('Error generating content:', error);
            const errorMessage = {
                id: Date.now() + 1,
                text: 'Desculpe, tive um problema t√©cnico aqui. Como desenvolvedor, sei que bugs acontecem! Pode tentar novamente?',
                isBot: true,
                options: [],
            };
            setMessages((prev) => [...prev, errorMessage]);

            // Adiciona mensagem de erro ao hist√≥rico tamb√©m
            setConversationHistory(prev => [...prev, {
                role: 'assistant',
                content: errorMessage.text
            }]);
        } finally {
            setIsTyping(false);
        }
    };

    const handleOptionClick = (option) => {
        handleSendMessage(option);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        handleSendMessage(userInput);
    };

    // Fun√ß√£o para limpar o hist√≥rico da conversa (mantida funcionando mas n√£o vis√≠vel)
    const clearConversation = () => {
        const welcomeMessage = {
            id: `welcome-${Date.now()}`,
            text: t.chat.welcome,
            isBot: true,
            options: Object.values(t.chat.options),
        };

        setMessages([welcomeMessage]);
        setConversationHistory([{
            role: 'assistant',
            content: t.chat.welcome
        }]);
        setIsTyping(false);
        setUserInput('');
    };

    return (
        <section className="chat-section">
            <motion.div
                className="chat-container"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
            >
                <div className="chat-header">
                    <h2>{t.chat.title}</h2>
                    <p>{t.chat.subtitle}</p>
                </div>

                <div className="messages-container">
                    <AnimatePresence>
                        {messages.map((message) => (
                            <Message
                                key={message.id}
                                text={message.text}
                                isBot={message.isBot}
                                options={message.options}
                                onOptionClick={handleOptionClick}
                            />
                        ))}
                        {isTyping && <TypingIndicator />}
                    </AnimatePresence>
                    <div ref={messagesEndRef} />
                </div>

                <form onSubmit={handleSubmit} className="chat-input-form">
                    <input
                        type="text"
                        value={userInput}
                        onChange={(e) => setUserInput(e.target.value)}
                        placeholder={t.chat.inputPlaceholder}
                        className="chat-input"
                        disabled={isTyping}
                    />
                    <button
                        type="submit"
                        className="chat-submit"
                        aria-label="Enviar mensagem"
                        disabled={isTyping || !userInput.trim()}
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="20" height="20">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                        </svg>
                    </button>
                </form>
            </motion.div>
        </section>
    );
};

export default InteractiveChat;
